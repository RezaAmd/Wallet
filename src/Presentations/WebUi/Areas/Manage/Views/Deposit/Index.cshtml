@{
    ViewData["Title"] = "Deposit history";
    Layout = "~/Areas/Manage/Views/Shared/_Layout.cshtml";
}

<h1><i class="fa fa-money-check-alt"></i> Diposit general history</h1>
<input class="form-control col-4" type="search" placeholder="Trace Id, Authority, Wallet Id..." />
<table class="table table-striped table-borderless mt-3">
    <thead>
        <tr>
            <th>Trace Id</th>
            <th><span title="Toman">Amount</span></th>
            <th><span title="Wallet Id">Destination Id</span></th>
            <th class="text-center">State</th>
            <th>Created Date & Time</th>
            <th></th>
        </tr>
    </thead>
    <tbody>
        @* Loading *@
        <tr v-if="deposits.state === 0">
            <td class="text-center" colspan="6">Loading ...</td>
        </tr>
        @* Loaded succedd *@
        <tr v-if="deposits.state === 200" v-for="deposit in deposits.list">
            <td>{{deposit.traceId}}</td>
            <td>{{deposit.amount}}</td>
            <td><i class="far fa-wallet"></i> {{deposit.destinationId}}</td>
            <td class="text-center">
                <i v-bind:class="[deposit.state == 0 ? 'far fa-hourglass text-warning'
                : deposit.state == 400 ? 'fa fa-times text-danger'
                : 'fa fa-check text-success']"
                   v-bind:title="[deposit.state == 0 ? 'Pending'
                : deposit.state == 400 ? 'Failed'
                : 'Success']"></i>
            </td>
            <td><span v-bind:title="deposit.createdDateTime.persianDateTime">{{deposit.createdDateTime.dateTime}}</span></td>
            <td></td>
        </tr>
        @* Not Found *@
        <tr v-else>
            <td class="text-center" colspan="6">No items found!</td>
        </tr>
    </tbody>
</table>
@section Scripts {
    <script>
        var app = new Vue({
            el: '#app',
            mounted: async function() {
                await this.getDeposits();
            },
            data: {
                deposits: {
                    state: 0,
                    list: []
                }
            },
            methods: {
                getDeposits: async function() {
                    var myHeaders = new Headers();
                    myHeaders.append("Authorization", "Bearer JWT_TOKEN");
                    var response = await fetch(consts.urls.baseUrl + "/manage/deposit/getAll", {
                        method: 'GET',
                        headers: myHeaders,
                        redirect: 'follow'
                    });
                    let result = await response.json();
                    if (result) {
                        if (result.statusCode == 200) {
                            this.mapDeposits(result.data.items);
                        }
                        this.deposits.state = result.statusCode;
                    }
                },
                mapDeposits: function(depositsResponse) {
                    this.deposits.list = depositsResponse.map(function(deposit) {
                        let createdDateTime = new Date(deposit.dateTime);
                        let yyyy = createdDateTime.getFullYear();
                        let MM = createdDateTime.getMonth();
                        let dd = createdDateTime.getDay();
                        let HH = createdDateTime.getHours();
                        let mm = createdDateTime.getMinutes();
                        let ss = createdDateTime.getSeconds();
                        return {
                            traceId: deposit.traceId,
                            amount: deposit.amount,
                            destinationId: deposit.destinationId,
                            state: deposit.state,
                            createdDateTime: {
                                dateTime: `${yyyy}/${MM}/${dd} - ${HH}:${mm}:${ss}`,
                                persianDateTime: new persianDate(createdDateTime).format('dddd, DD MMMM YYYY - HH:mm')
                            }
                        };
                    });
                    this.setupTooltip();
                },
                setupTooltip: function() {
                    setTimeout(function() {
                        var tooltipTriggerList = [].slice.call(document.querySelectorAll('[title]'))
                        var tooltipList = tooltipTriggerList.map(function(tooltipTriggerEl) {
                            return new bootstrap.Tooltip(tooltipTriggerEl)
                        })
                    }, 10)
                }
            }
        });
    </script>
}